/********************************************************/
//
//  概要
//      メイン関数
//		
//		PROJECT NAME:SAKURA_PRPJECT MASTER	
//		version		:1.0
//
//		CPU TYPE    :SH7125 
//
// 		Iφ = 50MHz		内部クロック
//  	Bφ = 25MHz		バスクロック								      
//		Pφ = 25MHz		周辺クロック								    
//		MPφ= 25MHz		MTU2 クロック 
//
//  作成者
//		D.Yamamuro @ TUTrobo
//		S.Baba	   @ TUTrobo
//		K.Ishimori @ TUTrobo
//      K.Yamada   @TUTrobo
//
/********************************************************/

/********************************************************/
//
//  変更点
//			
//	問題点
//
//	持ち物
//		/* 制御・回路班リスト */
//
//		/* 機械班 */
//
/********************************************************/
                  
#include "setup.h"		// マイコンの設定
#include	<machine.h>

volatile char *send_data = "";		// 出力関数のため(データ本体)
volatile char send_data_cnt = 0;	// 出力関数のため(データ数)
	
int main()
{	
	/********************* main文タスク選択 ここから*********************/

//	#define GAME				// 試合	
//	#define ENCODER_DEBUG		// ENCODERのデバック
//	#define ENC_CTRL_DEBUG		// エンコーダによるフィードバックのデバック
//	#define MOTOR_DEBUG 		// MOTORのデバック
//	#define OMUNI_DEBUG			// オムニのデバッグ(3つのduty)
//	#define R1350N_DEBUG		// ジャイロのデバッグ
//	#define GMACOND_DEBUG		// ジャイロMAP状態のデバッグ
//	#define MACOND_DEBUG		// マシンコンディションのデバッグ
//	#define OMUNI_RES			// オムニの補正値だし 
//	#define CUSTOMIZE_DEBUG		// 色々、その時次第
//	#define HALF_1_DEBUG		// half_1のデバッグ
//	#define SUSPENTION_DEBUG	// 足回りのデバック
//	#define TOWER_DEBUG			// タワーのデバック
	#define	SERVO_DEBUG			// サーボのデバック
//	#define ARM_POSITION		// アーム系の位置確認
//	#define AD_0_3_DEBUG		// AD変換データのデバック(チャンネル0〜チャンネル3)使ってない
//	#define AD_4_7_DEBUG		// AD変換データのデバック(チャンネル4〜チャンネル7)
//	#define BUZZER_DEBUG		// BUZZERのデバック
//	#define LED_DEBUG 			// LEDのデバック
//	#define LED_CTRL_DEBUG 		// LEDコントロールのデバック
//	#define AIR_DEBUG			// AIRのでバック
//	#define MODE_DEBUG			// モードのデバック
//	#define BUTTON_DEBUG		// ボタンのデバック
//	#define LIMIT_DEBUG			// リミットのデバック
//	#define COM0_MASTER_DEBUG	// 通信のマスターのデバック
//	#define COM0_SLAVE_DEBUG	// 通信のスレーブのデバック
//	#define COM1_SLAVE_DEBUG	// 通信のスレーブのデバック
//	#define COMU0_MASTER_DEBUG	// 石森通信のマスターデバック
//	#define COMU0_SLAVE_DEBUG	// 石森通信のスレーブデバック
//	#define WDT_DEBUG			// ウォッチドックタイマのデバック

	/********************* main文タスク選択 ここまで*********************/
	
	/********************** main文型名宣言 ここから**********************/
	
		
	/********************** main文型名宣言 ここから**********************/	
	
	/************** main文プログラムスタートアップ ここから**************/
	
	setup();					// マイコンの初期設定
	TASK_START();         		// カウントスタート 割り込みスタート

#if 0
	TASK_START();         		// カウントスタート 割り込みスタート
//	SENCE_START();         		// カウントスタート 割り込みスタート

	while(1)					// モーター電源ON
	{
	//	SCI_SEND(1,'W');

//		printf("%d %d %d\n",half_1,maru,duty_L);
		if(HALF_1==255 && PSCON_PRE_MARU==0 && DUTY_L==0)
		{
			//power_on();
			POWER_OUT = ON;
			break;
		}
		
	}
#endif

//	COM0_START();				// 通信開始
	
	/*************** main文タスク選択より適用設定 ここから***************/
	#ifdef	MOTOR_DEBUG 		// MOTORのデバックのとき		
			motor_pwm_init();	// MOTOR_PWMの初期化
	#endif
			
	#ifdef	SUSPENTION_DEBUG	// 足回りのデバックのとき		
			motor_pwm_init();	// MOTOR_PWMの初期化
	#endif
	
	#ifdef	SERVO_DEBUG			// サーボのデバックのとき
		//	servo_pwm_init();	// SORVO_PWMの初期化
	#endif
	/*************** main文タスク選択より適用設定 ここまで***************/
	
	/*************** main文タスク選択より例外設定 ここから***************/	
	#ifdef	GAME 				// 試合のとき
	#define	EXCEPTION			// 例外
	#endif
			
	#ifdef	ENCODER_DEBUG 		// ENCODERのデバックのとき
	#define	EXCEPTION			// 例外
	#endif
			
	#ifdef	WDT_DEBUG			// ウォッチドックタイマのとき
	#define	EXCEPTION			// 例外
	#endif
	
//	#ifdef	comu0_slave_debug	// 石森通信のスレーブデバック
//	#define	EXCEPTION			// 例外
//	#endif
	
#ifndef EXCEPTION			// 例外でないとき
			wdt_stop();			// WDTを禁止
//			TASK_END();        	// タイマ割り込み禁止
//			SENCE_END();        // カウントスタート 割り込みスタート
#endif
	
	/************** main文タスク選択より例外設定 ここから****************/
	
	/************** main文プログラムスタートアップ ここまで**************/
#if 0
AIR_RIGHT_HAND 		=0;
AIR_LEFT_HAND 		=0;
AIR_RIGHT_HAND_WIDE	=0;
AIR_LEFT_TOWER 		=0;
AIR_RIGHT_TOWER_UP   =   0;
POWER_OUT			=0;
AIR_LEFT_HAND_WIDE	=0;
BUZZER_OUT			=0;
#endif
{	
//	double da[2]={1252.32,342.8};
//	fcu_eraze_db00();
//	fld_program_8byte(TOP_ADDR_DB00,da);
//	printf("i:%d p:%d status:%d\n",FLASH.FSTATR0.BIT.ILGLERR,FLASH.FSTATR0.BIT.PRGERR,FLASH.FASTAT.BYTE);
}
/*
	fld_enable_read();
{
	double *read;
	read = (double*)TOP_ADDR_DB00;
	printf("%d\n",sizeof(double));
	printf(" %f\n",*read);
}
printf("\n");
*/
{
#if 0

	fcu_eraze_db(TOP_ADDR_DB01);
	printf("write:%d\n",fld_program_route(TOP_ADDR_DB01,&red));

	fcu_eraze_db(TOP_ADDR_DB02);
	printf("write:%d\n",fld_program_route(TOP_ADDR_DB02,&red));
	
	fcu_eraze_db(TOP_ADDR_DB03);
	printf("write:%d\n",fld_program_route(TOP_ADDR_DB03,&red));
	
	fcu_eraze_db(TOP_ADDR_DB04);
	printf("write:%d\n",fld_program_route(TOP_ADDR_DB04,&red));

	fcu_eraze_db(TOP_ADDR_DB05);
	printf("write:%d\n",fld_program_route(TOP_ADDR_DB05,&blue));

	fcu_eraze_db(TOP_ADDR_DB06);
	printf("write:%d\n",fld_program_route(TOP_ADDR_DB06,&blue));
	
	fcu_eraze_db(TOP_ADDR_DB07);
	printf("write:%d\n",fld_program_route(TOP_ADDR_DB07,&blue));

	fcu_eraze_db(TOP_ADDR_DB00);
	printf("write:%d\n",fld_program_route(TOP_ADDR_DB00,&blue));

#endif
}
/*
	fld_debug_route(TOP_ADDR_DB01);
	
	fld_debug_route(TOP_ADDR_DB02);
	
	fld_debug_route(TOP_ADDR_DB03);
	
	fld_debug_route(TOP_ADDR_DB04);
	
	fld_debug_route(TOP_ADDR_DB05);
	
	fld_debug_route(TOP_ADDR_DB06);
	
	fld_debug_route(TOP_ADDR_DB07);
	
	fld_debug_route(TOP_ADDR_DB00);
*/
	comm_action('I',1);
	
	
	while(1)
	{
	//	printf("%d\n",~(PORTE.PORT.BYTE)&0x1f);
	//	printf("%d, %d, %d, %d, %d, %d\n",ENC1_TCNT,ENC2_TCNT,ROLLER1_PWM,ROLLER2_PWM,RELOAD1_PWM,RELOAD2_PWM);
	//	printf("(%d) %d, %d, %.1f, %.1f, %.2f, %.2f, %d\n",cmdp.reload,ad_debug_g[0],ad_debug_g[1],pid_duty_g[0],pid_duty_g[1],rot_cnt_g[0],rot_cnt_g[1],cmdp.shot_spd);
	
	//	pscon_debug();
	//	printf("%d, %d, %d,air_up:%d,air_down:%d\n",hand_R_status,hand_L_status,tower_L_status,air_OPEN,air_CLOSE);
	//	printf("%lf\n",macond.v_rad);
//		debug();
			
	}
			
	return 0;
}		
void debug(){
	int loop = 0;				// for文のための型	
	int res = 0;				// 返り値のため
	int cmd_loop,data_loop;
	double pwm_loop;			// PWMのデバックのため for文ループ用
	int pwm;					// PWMのデバックのため pwm値格納用
	double duty;				// dutyのデバックのため
//	int ad_data[4];				// ad_data格納のため
	int send_buff;				// 出力関数のため(データ)
	int delay_count1;			// delaytimeのため
	int delay_count2;			// delaytimeのため


#ifdef	CUSTOMIZE_DEBUG
{
printf("%d\n",L1);
//printf("%.2f\n",set_duty_debug[2]*180.0/PI);
//printf("%3d,%3d,%3d\n",L2,R2,half_2);
//printf("ad=%d,pwm=%d\n",ad_data[0],SERVO_CYCLE*ad_data[0]/1023);
//		printf("%d\n",front_shift);
//		printf("duty=%.2f,v=%.2f\n",custom_debug[0],custom_debug[1]);

//		printf("l=%d,r=%d,theta=%.1f\n",MTU21.TCNT,MTU22.TCNT,macond.t_theta);
		
//		printf("%d,%d\n",half_1,duty_L);
//		printf("theta=%.1f\n",macond.t_theta);
}
#endif

#ifdef OMUNI_RES
{		
		printf("%d\t\n", macond.renc.l);		// xのエンコーダカウント
		printf("%d\t\n", macond.renc.r);		// yのエンコーダカウント
		printf("%f\t\n", macond.t_theta);	// マシン角度
		printf("%f\t\n" , macond.pos.x);	// x座標
		printf("%f\t\n" , macond.pos.y);	// x座標
		

		printf("\n");
}
#endif

		//////////////////////////////////////////////////////////////////	
#ifdef	ENCODER_DEBUG
		/****************** エンコーダデータのデバック ******************/

		show_macond();
/*
		printf("%4d,%4d,%4d,%4d,%4d\n"	,com0_tx[0][0]	
										,com0_tx[0][1]	
										,com0_tx[0][2]	
										,com0_tx[0][3]
										,com0_tx[0][4]	);	
*/		
		/****************** エンコーダデータのデバック ******************/
#endif	// encoder_debug 
		//////////////////////////////////////////////////////////////////
#ifdef	ENC_CTRL_DEBUG
{
		/*************** エンコーダコントロールのデバック ***************/
//					 distEnd,	 ch,		num,	duty
//		enc_ctrl(recv0[0][1],     0,		  0,   &duty);
		
/*		for(loop = 0;loop <= 1000;loop = loop+200)
		{
//						 distEnd,	 ch,		num,	duty
			enc_ctrl(		loop,     0,		  0,   &duty);
			tower_motor_l(duty);
			tower_motor_r(duty);			
		}
*/		
		do
		{
//								distEnd,	 ch,		num,	duty
			res = 	enc_ctrl(	   loop,      0,		  0,   &duty);
			
			tower_motor_l(duty);
			tower_motor_r(duty);
			
			printf("%5.1f\t",duty);
//			printf("pwm_l = %4d\t",MTU24.TGRC);
//			printf("pwm_r = %4d\n",MTU24.TGRA);
		}
		while(res == 0);
		
//		tower_motor_l(duty);
//		tower_motor_r(duty);
		
		if(loop < -1000)	loop = 0;
		else				loop = loop-200;
					
//		for(delay_count1 = 0; delay_count1 < 65536; delay_count1 ++)	// delaytime
//		for(delay_count2 = 0; delay_count2 <   100; delay_count2 ++)
		for(delay_count1 = 0; delay_count1 <   100; delay_count1 ++)	// delaytime
		{
			printf("%5.1f\t",duty);
			printf("pwm_l = %4d\t",MTU24.TGRC);
			printf("pwm_r = %4d\n",MTU24.TGRA);
		}
		/*************** エンコーダコントロールのデバック ***************/
}
#endif//enc_ctrl_debug
		//////////////////////////////////////////////////////////////////		
#ifdef	MOTOR_DEBUG
{
		/********************** モーターのデバック **********************/
		
		for(pwm_loop = -100.0; pwm_loop <=  100.0; pwm_loop = pwm_loop + 0.1)
		{
			pwm = anti_lock_pwm(pwm_loop);
			MTU20.TGRA = pwm;
			MTU20.TGRB = pwm;
			MTU20.TGRC = pwm;
			MTU23.TGRA = pwm;
			MTU23.TGRC = pwm;
			MTU24.TGRA = pwm;
			MTU24.TGRC = pwm;
			
			printf("pwm = %4d\t,R = %4d\t,C = %4d\n",pwm,MTU24.TGRA,MTU24.TGRB);
		}
		for(pwm_loop =  100.0; pwm_loop >= -100.0; pwm_loop = pwm_loop - 0.1)
		{
			pwm = anti_lock_pwm(pwm_loop);

			MTU20.TGRA = pwm;
			MTU20.TGRB = pwm;
			MTU20.TGRC = pwm;
			MTU23.TGRA = pwm;
			MTU23.TGRC = pwm;
			MTU24.TGRA = pwm;
			MTU24.TGRC = pwm;
			
			printf("pwm = %4d\t,R = %4d\t,C = %4d\n",pwm,MTU24.TGRA,MTU24.TGRB);
		}

/*		pwm = anti_lock_pwm(50.0);
		
		MTU20.TGRA = pwm;
		MTU20.TGRB = pwm;
		MTU20.TGRC = pwm;
		MTU23.TGRA = pwm;
		MTU23.TGRC = pwm;
		MTU24.TGRA = pwm;
		MTU24.TGRC = pwm;
*/		
}	
		/********************** モーターのデバック **********************/
#endif

#ifdef OMUNI_DEBUG
{
	/********************** オムニのデバック **********************/
	printf("o=%.3f,l=%.3f,r=%.3f\n",motor_debug[0],motor_debug[1],motor_debug[2]);
	/********************* オムニのデバック **********************/
}
#endif

#ifdef R1350N_DEBUG
{
	/********************** ジャイロのデバック **********************/
		printf("m_angle=%.2f\t",(double)m_angle/100.0);
		printf("x=%d\t",accX);
		printf("y=%d\t",accY);
		printf("z=%d\n",accZ);
	/********************* ジャイロのデバック **********************/
}
#endif

#ifdef ARM_POSITION
{
	/********************** アームの位置表示 **********************/
		printf("fish_ad=%d\t",ad_data[2]);
		printf("fish_pos=%.2f\t",set_duty_debug[0]);
		printf("l_arm_ad=%d\t",ad_data[1]);
		printf("l_arm_pos=%.2f\n",set_duty_debug[1]);
	/********************* アームの位置表示 **********************/
}
#endif

#ifdef GMACND_DEBUG
{
	/********************** gmacondのデバック **********************/
		printf("ax=%.2f\t",gcond.ax);
		printf("ay=%.2f\t",gcond.ay);
		printf("m_ax=%.2f\t",gcond.m_ax);
		printf("m_ay=%.2f\t",gcond.m_ay);
		printf("dir=%.2f\t",gcond.a_rad*180.0/PI);
		printf("angle=%.2f\n",(double)m_angle/100.0);

	/********************* gmacondのデバック **********************/
}
#endif

#ifdef MACOND_DEBUG
{
	/********************** gmacondのデバック **********************/
		printf("t_theta=%.2f\t",macond.t_theta);
		printf("vx=%.2f\t",macond.vx);
		printf("vy=%.2f\t",macond.vy);
		printf("v=%.2f\t",macond.v);
		printf("v_rad=%.2f\t",macond.v_rad);
		printf("x=%.2f\t",macond.pos.x);
		printf("y=%.2f\n",macond.pos.y);

	/********************* gmacondのデバック **********************/
}
#endif

#ifdef HALF_1_DEBUG
{
	/********************** half_1のデバッグ **********************/
/*
  10進数を2進数に変換する(2)  
*/


	int i;
	unsigned int digit;
/* 1000 0000 0000 0000 0000 0000 0000 0000 */
	unsigned int bitCheck = 0x80000000;
	
digit=half_1;

	/* int型が4バイトであるため */	
	for(i=0; i<32; i++){
		switch(digit & bitCheck){
			case 0: 
				printf("0");
				break;
			default:
				printf("1");
		}
		/* 1ビット右にシフトする */		
		bitCheck >>= 1;
	}
	printf("\n");
	printf("%d\n",half_1);


//	printf("l1=%.3f,l2=%.3f,r1=%.3f,r2=%.3f\n",motor_debug[0],motor_debug[1],motor_debug[2],motor_debug[3]);
	/********************* half_1のデバック **********************/
}
#endif
		//////////////////////////////////////////////////////////////////	
#ifdef	SUSPENSION_DEBUG
{
		/*********************** 足回りのデバック ***********************/
/*		
		for(pwm_loop = -100.0; pwm_loop <=  100.0; pwm_loop = pwm_loop + 0.1)
		{
			pwm_set_ctrl(pwm_loop, pwm_loop);
			
			printf("duty = %5.1f\n",pwm_loop);
		}
		for(pwm_loop =  100.0; pwm_loop >= -100.0; pwm_loop = pwm_loop - 0.1)
		{
			pwm_set_ctrl(pwm_loop, pwm_loop);
			
			printf("duty = %5.1f\n",pwm_loop);
		}
*/

//		pwm_set_ctrl(    0.0,   50.0);
		pwm_set_ctrl(   50.0,    0.0);	
//		pwm_set_ctrl(   50.0,   50.0);	
//		pwm_set_ctrl(  100.0,  100.0);
//		pwm_set_ctrl( -100.0, -100.0);

/*		ad_load_4_7(ad_data);
		
		printf("%4d \t pwn = %5.1f\n",ad_data[6-4],(double)(ad_data[6-4])*100.0/1023.0);
		
		if(ad_data[6-4] >= 511)
		{
			pwm_set_ctrl((double)(ad_data[6-4]-511)*100.0/512,(double)(ad_data[6-4]-511)*100.0/512);
		}
		else
		{
			pwm_set_ctrl(-(double)(511-ad_data[6-4])*100.0/512,-(double)(511-ad_data[6-4])*100.0/512);
		}
*/		
		/*********************** 足回りのデバック ***********************/
}
#endif
		//////////////////////////////////////////////////////////////////			
#ifdef	TOWER_DEBUG
{
		/*********************** タワーのデバック ***********************/		
/*		for(pwm_loop = -100.0; pwm_loop <=  100.0; pwm_loop = pwm_loop + 1.0)
		{
			tower_motor_l(pwm_loop);
			tower_motor_r(pwm_loop);
			printf("duty = %5.1f\n",pwm_loop);
		}
		for(pwm_loop =  100.0; pwm_loop >= -100.0; pwm_loop = pwm_loop - 1.0)
		{
			tower_motor_l(pwm_loop);
			tower_motor_r(pwm_loop);
			printf("duty = %5.1f\n",pwm_loop);
		}
*/
		tower_motor_l(50.0);
		tower_motor_r(50.0);
		/*********************** タワーのデバック ***********************/
}
#endif
		//////////////////////////////////////////////////////////////////	
#ifdef	SERVO_DEBUG
{
	
		/********************** サーボのデバック **********************/

/*		
		for(pwm_loop = -100.0; pwm_loop <=  100.0; pwm_loop = pwm_loop + 1.0)
		{
			pwm = servo_pwm(pwm_loop);
			
			MTU20.TGRA = pwm;
			MTU20.TGRB = pwm;
			MTU20.TGRC = pwm;
			MTU23.TGRA = pwm;
			MTU23.TGRC = pwm;
			MTU24.TGRA = pwm;
			MTU24.TGRC = pwm;
			
			printf("pwm_loop = %6.1f,\tpwm = %4d\n",pwm_loop,pwm);
		}

		for(pwm_loop =  100.0; pwm_loop >= -100.0; pwm_loop = pwm_loop - 1.0)
		{
			pwm = servo_pwm(pwm_loop);

//			MTU20.TGRA = pwm;
//			MTU20.TGRB = pwm;
//			MTU20.TGRC = pwm;
//			MTU23.TGRA = pwm;
//			MTU23.TGRC = pwm;
			MTU24.TGRA = pwm;
			MTU24.TGRC = pwm;
						
			printf("pwm_loop = %6.1f,\tpwm = %4d\n",pwm_loop,pwm);
		}
*/
	TASK_END();         		// カウントスタート 割り込みスタート

		ad_load_0_3(ad_data);
		pwm = (ad_data[2])*SERVO_CYCLE/1023;
		printf("%4d \t pwn = %d\n",ad_data[2],pwm);
		SERVO_B_PWM = pwm;	
//		MTU20.TGRA = pwm;
//		MTU20.TGRB = pwm;
//		MTU20.TGRC = pwm;
//		MTU23.TGRA = pwm;
//		MTU23.TGRC = pwm;
//		MTU24.TGRA = pwm;
//		MTU24.TGRC = pwm;
					
		/********************** モーターのデバック **********************/
}
#endif
		//////////////////////////////////////////////////////////////////
#ifdef	AD_0_3_DEBUG
{
		/******* AD変換データのデバック(チャンネル0〜チャンネル3) *******/
		
		ad_load_0_3(ad_data);
		
		for(loop = 0;loop <= 3;loop++)
			printf("ad_data[%d] = %4d\t",loop,ad_data[loop]);
		put_s("\n\r");
		
		/******* AD変換データのデバック(チャンネル0〜チャンネル3) *******/
}
#endif	
		//////////////////////////////////////////////////////////////////
#ifdef	AD_4_7_DEBUG
{
		/******* AD変換データのデバック(チャンネル4〜チャンネル7) *******/
		
		//ad_load_4_7(ad_data);
		
		for(loop = 4;loop <= 7;loop++)
			printf("ad_data[%d] = %d\t",loop,ad_data[loop-4]);
		put_s("\n\r");
		
		/******* AD変換データのデバック(チャンネル4〜チャンネル7) *******/
}
#endif
		//////////////////////////////////////////////////////////////////
#ifdef	BUZZER_DEBUG
{
		/*********************** ブザーのデバック ***********************/
		
		//buzzer_on();
		BUZZER_OUT=ON;
		for(delay_count1 = 0; delay_count1 < 65536; delay_count1 ++)	// delaytime
		for(delay_count2 = 0; delay_count2 <    10; delay_count2 ++);
		
		//buzzer_off();
		BUZZER_OUT=OFF;
		for(delay_count1 = 0; delay_count1 < 65536; delay_count1 ++)	// delaytime
		for(delay_count2 = 0; delay_count2 <    10; delay_count2 ++);
		
		/*********************** ブザーのデバック ***********************/
}
#endif	
		//////////////////////////////////////////////////////////////////
#ifdef	LED_DEBUG
{
		/************************* LEDのデバック ************************/
		
		led_on();
		
		for(delay_count1 = 0; delay_count1 < 65536; delay_count1 ++)	// delaytime
		for(delay_count2 = 0; delay_count2 <    30; delay_count2 ++);	
		
		led_off();
		
		for(delay_count1 = 0; delay_count1 < 65536; delay_count1 ++)	// delaytime
		for(delay_count2 = 0; delay_count2 <    30; delay_count2 ++);
		
		/************************* LEDのデバック ************************/
}
#endif	
		//////////////////////////////////////////////////////////////////
#ifdef	LED_CTRL_DEBUG
{
		/****************** LEDコントロールのデバック *******************/
		
		for(loop = 0; loop < 32; loop ++)
		{
			led_ctrl(loop);
			
			for(delay_count1 = 0; delay_count1 < 65536; delay_count1 ++)	// delaytime
			for(delay_count2 = 0; delay_count2 <    30; delay_count2 ++);
			
		}
		
		/****************** LEDコントロールのデバック *******************/
}
#endif
		//////////////////////////////////////////////////////////////////
#ifdef	AIR_DEBUG
{
		/****************** AIRコントロールのデバック *******************/
		
		leaf_collect_hand(OPEN);
		leaf_esta_hand   (OPEN);
		
		for(delay_count1 = 0; delay_count1 < 65536; delay_count1 ++)	// delaytime
		for(delay_count2 = 0; delay_count2 <    30; delay_count2 ++);
		
		leaf_collect_hand(CLOSE);
		leaf_esta_hand   (CLOSE);
		
		for(delay_count1 = 0; delay_count1 < 65536; delay_count1 ++)	// delaytime
		for(delay_count2 = 0; delay_count2 <    30; delay_count2 ++);
		
		/****************** AIRコントロールのデバック *******************/
}
#endif		
		//////////////////////////////////////////////////////////////////
#ifdef	MODE_DEBUG
{
		/*********************** モードのデバック ***********************/
		
		send_buff = mode();
		
		put_c(send_buff);
		put_s("\n\r");
		
		/*********************** モードのデバック ***********************/
}
#endif	
		//////////////////////////////////////////////////////////////////
#ifdef	BUTTON_DEBUG
{
		/*********************** ボタンのデバック ***********************/
				
		/*********************** ボタンのデバック ***********************/
}
#endif	
		//////////////////////////////////////////////////////////////////
#ifdef	LIMIT_DEBUG
{
		/********************** リミットのデバック **********************/
		
//		send_data[0] = limit();
printf("%d %d %d %d %d %d %d %d\n",
AIR_R_UNDER_LIMIT,
AIR_R_UP_LIMIT,   		
AIR_L_UNDER_LIMIT, 		
AIR_L_UP_LIMIT,
R_TOWER_UNDER_LIMIT,
L_TOWER_UNDER_LIMIT,
SERVO_LIMIT);
/*
		if(PA.DRL.BIT.B14==0)	printf("A14 ");//
		if(PA.DRL.BIT.B15==0)	printf("A15 ");//
		if(PB.DR.BIT.B1==0)		printf("R_LEAF ");//Rリーフ
		if(PB.DR.BIT.B2==0)		printf("L_LEAF ");//Lリーフ
		if(PB.DR.BIT.B3==0)		printf("SERVO_LIMIT ");//servo上のリーフ検知リミット
		if(PB.DR.BIT.B5==0)		printf("B5 ");//
		if(PF.DRL.BIT.B0==0)		printf("R_HAND_D ");//Rハンド下
		if(PF.DRL.BIT.B1==0)	printf("R_HAND_U ");//Rハンド上
		if(PF.DRL.BIT.B2==0)	printf("L_HAND_U ");//Lハンド上
		if(PF.DRL.BIT.B3==0)	printf("L_HAND_D ");//Lハンド下
		printf("\n");
*/		
		
		/********************** リミットのデバック **********************/
}
#endif		
		//////////////////////////////////////////////////////////////////	
#ifdef	COM0_MASTER_DEBUG
{
		/**************** 通信のマスターのデバック(com0) ****************/
		
		send_data = "ABC\n\r";		// 送信データ
		send_data_cnt = 2;			// 送信データ数(char型でカウント)
		send_data = "ABC";			// 送信データ
		send_data_cnt = 3;			// 送信データ数(char型でカウント)
		
		for(loop = 0; loop < send_data_cnt; loop++)
		{
			send_c(send_data[loop]);
			for(delay_count1 = 0; delay_count1 < 65536; delay_count1 ++)	// delaytime
			for(delay_count2 = 0; delay_count2 <    30; delay_count2 ++);
		}
		
		/**************** 通信のマスターのデバック(com0) ****************/	
}
#endif	
		//////////////////////////////////////////////////////////////////	
#ifdef	COM0_SLAVE_DEBUG
{
		/**************** 通信のスレーブのデバック(com0) ****************/
			
		send_data = "ABC\n\r";		// 送信データ
		send_data_cnt = 5;			// 送信データ数(char型でカウント)
		
/*		for(loop = 0; loop < send_data_cnt; loop++)
		{
			send_c(send_data[loop]);
		}
*/		

/*		for(loop = 0; loop < send_data_cnt; loop++)
		{
			put_c(send_data[loop]);
		}
*/
//		put_c(recv_data[0]);
/*
		send_buff = SCI0.SCSSR.BIT.RDRF;
		printf("%d",send_buff);
		put_c('\t');
		
		send_buff = SCI0.SCSSR.BIT.ORER;
		printf("%d",send_buff);
		put_c('\t');
		
		send_buff = SCI0.SCSSR.BIT.FER;
		printf("%d",send_buff);
		put_c('\t');
		
		send_buff = SCI0.SCSSR.BIT.PER;
		printf("%d",send_buff);
		put_c('\t');
		
		put_c(recv_data[0]);
		
		put_s("\n\r");
*/
		send_buff = SCI0.SCSCR.BYTE;
		printf("%d\t",send_buff);
		
		send_buff = SCI0.SCSSR.BIT.RDRF;
		printf("%d\t",send_buff);
		
//		txrx_0('A');
		
//		put_c(txrx_0('A'));
		put_c(recv_data[0]);
		put_s("\n\r");
		
		/**************** 通信のスレーブのデバック(com0) ****************/	
}
#endif	
		//////////////////////////////////////////////////////////////////	
#ifdef	COM1_SLAVE_DEBUG
{
		/**************** 通信のスレーブのデバック(com1) ****************/
			
//		printf("%d\n",com1_rx[0][0]);
		for(cmd_loop = 0;cmd_loop < CMD_NUMBER_1;cmd_loop ++)
		{
			printf("%4d," ,recv1[cmd_loop]);
			printf("\t");
		}
		
		printf("\n");	// 改行	
				
		/**************** 通信のスレーブのデバック(com1) ****************/	
}
#endif	
		//////////////////////////////////////////////////////////////////	
#ifdef	COMU0_MASTER_DEBUG
{
		/*************** 石森通信のマスターデバック(com0) ***************/
//				   com_ch,cmd_number,object,	data
		for(loop = 0; loop < 1000; loop++)
		{
			directions(		0,		   0,	'A',	loop);	// 送信データの作成
/*			printf("%4d,%4d,%4d,%4d,%4d\n"	,com0_tx[0][0]	
											,com0_tx[0][1]	
											,com0_tx[0][2]	
											,com0_tx[0][3]
											,com0_tx[0][4]	);	
*/
		}

/*
//				   com_ch,cmd_number,object,	data
		directions(		0,		   0,	'A',	  0);	// 送信データの作成
		for(delay_count1 = 0; delay_count1 < 65536; delay_count1 ++)	// delaytime
		for(delay_count2 = 0; delay_count2 <   500; delay_count2 ++);
//				   com_ch,cmd_number,object,	data
		directions(		0,		   0,	'A',	-200);	// 送信データの作成
		for(delay_count1 = 0; delay_count1 < 65536; delay_count1 ++)	// delaytime
		for(delay_count2 = 0; delay_count2 <   500; delay_count2 ++);
//				   com_ch,cmd_number,object,	data
		directions(		0,		   0,	'A',	-400);	// 送信データの作成
		for(delay_count1 = 0; delay_count1 < 65536; delay_count1 ++)	// delaytime
		for(delay_count2 = 0; delay_count2 <   500; delay_count2 ++);
//				   com_ch,cmd_number,object,	data
		directions(		0,		   0,	'A',	-600);	// 送信データの作成
		for(delay_count1 = 0; delay_count1 < 65536; delay_count1 ++)	// delaytime
		for(delay_count2 = 0; delay_count2 <   500; delay_count2 ++);
//				   com_ch,cmd_number,object,	data
		directions(		0,		   0,	'A',	-800);	// 送信データの作成
		for(delay_count1 = 0; delay_count1 < 65536; delay_count1 ++)	// delaytime
		for(delay_count2 = 0; delay_count2 <   500; delay_count2 ++);
//				   com_ch,cmd_number,object,	data
		directions(		0,		   0,	'A',  -1000);	// 送信データの作成
		for(delay_count1 = 0; delay_count1 < 65536; delay_count1 ++)	// delaytime
		for(delay_count2 = 0; delay_count2 <   500; delay_count2 ++);
*/
		/*************** 石森通信のマスターデバック(com0) ***************/	
}
#endif
		//////////////////////////////////////////////////////////////////	
#ifdef	COMU0_SLAVE_DEBUG
{
		/*************** 石森通信のスレーブデバック(com0) ***************/			
/*		printf("%1d,%1d,%1d,%1d\t"	,SCI0.SCSSR.BIT.RDRF	// RDRFフラグ
									,SCI0.SCSSR.BIT.ORER	// オーバランエラー
									,SCI0.SCSSR.BIT.FER		// フレーミングエラー
									,SCI0.SCSSR.BIT.PER	);	// パリティエラー

		printf("%4d,%4d,%4d,%4d,%4d\t"	,com0_rx[0][0]		// 受信データ生データ 
										,com0_rx[0][1]	
										,com0_rx[0][2]	
										,com0_rx[0][3]
										,com0_rx[0][4]	);	
										
		printf("%4d,%4d,%4d,%4d,%4d\t"	,com0_rx[1][0]		// 受信データ生データ 
										,com0_rx[1][1]	
										,com0_rx[1][2]	
										,com0_rx[1][3]
										,com0_rx[1][4]	);
										
		printf("\n");	// 改行	
*/										
/*		for(cmd_loop = 0;cmd_loop < CMD_NUMBER_0;cmd_loop ++)
		{
			printf("%4d\t",recv0[cmd_loop][0]);
			printf("\t");
		}
		printf("\n");	// 改行	
*/	
		for(cmd_loop = 0;cmd_loop < CMD_NUMBER_0;cmd_loop ++)
		{
			printf("%4d," ,recv0[cmd_loop]);
			printf("\t");
		}
		printf("\n");	// 改行	
	
//		loop = check_data(com0_rx[0],&send_buff);								
//		printf("%4d,%4d\t",loop,send_buff);
//		printf("%4d\t",recv0[0][1]);								


		/*************** 石森通信のスレーブデバック(com0) ***************/	
}
#endif		
		//////////////////////////////////////////////////////////////////	
#ifdef	WDT_DEBUG	
{
		/**************** ウォッチドッグタイマのデバック ****************/
		int wdt_count;				// ウォッチドッグタイマのデバックのため
		wdt_count = WDT.READ.WTCNT;
		printf("wdt_count = %d\n",wdt_count);	
		
		/**************** ウォッチドッグタイマのデバック ****************/
}
#endif

}